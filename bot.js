// Generated by CoffeeScript 2.5.1
(function() {
  var Datastore, EventLogger, ScanStatus, UserDB, Wechaty, _, bot, fastify, sendWebhook, sleep, start, uuid;

  require("dotenv").config();

  Datastore = require("nedb-promises");

  _ = require("lodash");

  ({
    v1: uuid
  } = require("uuid"));

  fastify = require("fastify")({
    logger: true
  });

  UserDB = Datastore.create("./user.db");

  ({Wechaty, ScanStatus} = require("wechaty"));

  ({EventLogger} = require("wechaty-plugin-contrib"));

  sleep = function() {
    return new Promise(function(resolve) {
      return setTimeout(resolve, _.random(1.2, 3.2) * 1000);
    });
  };

  bot = new Wechaty({
    puppet: "wechaty-puppet-service",
    puppetOptions: {
      token: process.env.WECHATY_TOEKN
    }
  });

  bot.use(EventLogger()).on("scan", function(qrcode, status) {
    if (status === ScanStatus.Waiting && qrcode) {
      return require("qrcode-terminal").generate(qrcode, {
        small: true
      });
    }
  }).on("friendship", async function(friendship) {
    var contact;
    // 自动通过好友， 并发送拉入群提醒
    await sleep();
    switch (friendship.type()) {
      case bot.Friendship.Type.Receive:
        return (await friendship.accept());
      case bot.Friendship.Type.Confirm:
        contact = friendship.contact();
        return (await sendWebhook(contact));
    }
  }).on("message", async function(message) {
    var text;
    text = message.text();
    if (text === "webhook" || text === "推送地址") {
      return (await sendWebhook(message.talker()));
    }
  });

  sendWebhook = async function(contact) {
    var _send, token, user;
    user = (await UserDB.findOne({
      contactid: contact.id
    }));
    _send = async function(token) {
      return (await contact.say(`发送地址: ${process.env.DOMAIN}/send/${token}?msg=xxx`));
    };
    if (user) {
      return (await _send(user.token));
    }
    token = uuid();
    await UserDB.insert({
      contactid: contact.id,
      token: token
    });
    return (await _send(token));
  };

  fastify.register(require("fastify-rate-limit"), {
    max: 100,
    global: false
  });

  fastify.get("/send/:token", {
    config: {
      rateLimit: {
        max: 10,
        keyGenerator: function(req) {
          return req.params.token;
        }
      }
    }
  }, async function(request, reply) {
    var contact, msg, token, user;
    ({msg} = request.query);
    ({token} = request.params);
    user = (await UserDB.findOne({
      token: token
    }));
    if (!user) {
      return {
        status: false,
        msg: "token not exists"
      };
    }
    contact = bot.Contact.load(user.contactid);
    contact.say(msg);
    return {
      status: true
    };
  });

  start = async function() {
    await bot.start();
    await fastify.listen(process.env.PORT || 3000);
    return console.log("listen " + process.env.PORT || 3000);
  };

  start();

}).call(this);
